# -*- coding: utf-8 -*-
"""AAI627spark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QddnuRHnb0z4DysvJl9uhvI_mFjrhrrB
"""

!apt-get install openjdk-8-jdk-headless -qq > /dev/null

!apt-get install openjdk-8-jdk-headless -qq > /dev/null

!wget -q https://downloads.apache.org/spark/spark-3.5.1/spark-3.5.1-bin-hadoop3.tgz

!tar -xvf spark-3.5.1-bin-hadoop3.tgz

!pip install -q findspark

import os

os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"

os.environ["SPARK_HOME"] = "/content/spark-3.5.1-bin-hadoop3"

import findspark

findspark.init()

from pyspark.sql import SparkSession

spark = SparkSession.builder.master("local[*]").getOrCreate()

from google.colab import files

uploaded = files.upload()

from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.ml.recommendation import ALS

training = spark.read.csv("trainItem.data", header = False)
training.show(5)

training = training.withColumnRenamed("_c0", "userID").withColumnRenamed("_c1", "itemID").withColumnRenamed("_c2", "rating")
training.show(5)

from pyspark.sql.types import IntegerType
training = training.withColumn("userID", training["userID"].cast(IntegerType()))
training = training.withColumn("itemID", training["itemID"].cast(IntegerType()))
training = training.withColumn("rating", training["rating"].cast('float'))
training.show(3)

# Create ALS model
als = ALS(
    maxIter=5,
    rank = 5,
    regParam=0.01,
    userCol="userID",
    itemCol="itemID",
    ratingCol="rating",
    nonnegative = True,
    implicitPrefs = False,
    coldStartStrategy="drop"
)

model = als.fit(training)

testing = spark.read.csv("testItem.data", header = False)

testing = testing.withColumnRenamed("_c0", "userID").withColumnRenamed("_c1", "itemID").withColumnRenamed("_c2", "rating")
testing.show(5)

testing = testing.withColumn("userID", testing["userID"].cast(IntegerType()))
testing = testing.withColumn("itemID", testing["itemID"].cast(IntegerType()))
testing = testing.withColumn("rating", testing["rating"].cast('float'))
testing.show(3)

predictions = model.transform(testing)
predictions.show(5)

# save dataframe into a folder 'predictions'
# with a single file (coalesce(1))
# but you can not assign the filename
predictions.coalesce(1).write.csv("predictions")

# save dataframe to a single csv file
predictions.toPandas().to_csv('myprediction.csv')